from my_math import *
import datetime

from Crypto.PublicKey import RSA

pub = 703736009777184023089624814294592409249277452625745332757748389922801741403132753895424956388387034273861704174435411451253765105079397120958872187527398178629501434078067418714846607682059069798574406610333331388412522990466355618040442382555614571786326428324677722983316749811853794357411141610435300835386989472811731560202124433559716440618403774406013112724584220666211501545924520442351542797557629270882264182262005277582509037749501382261242519580373623050239858729306403575493062068246361660464431979222255286607177960552377520641931539650418675636738331810407143618482992844547670928974936038951567591528689023958925930857444803834201333363376485052184620872889976780466254428553439326683400737459946435445593167513822561889035880970220242237069795421833351399207596652040975400934759313225795135579755501187953271972597453681198882579090204178585215287291128291110497463202519470201521012255346320401213138901745855375111052643539718441410622424114206107789488912852766791798855906048087159876707180554566000796905245249086608275361948169031413532510427274945775448276669109772186210491564884240231041871186320755075880893581328945007785825690451605635542990931797031506211432626245327066981237246482947862142696660603935179310588180561676081574950359396965211446424789761144761606342776267112954791733598610792818252961511229974482753508196518860191958964220679243995654279910974161407559127855740046032158951877362421762355627310328282143581414598530407022746474682094127104218125183713456517735361266692009345444465402893058372086320929304914118002383121427261401555753375226523940721937608451622837961534648668391237123192999454891462608159538103758923545288887496718886793807497005618077383923382779250298306677477746495520688259412481446142845579868052595476414819499085761920773117069550056275263556314997284076031013443797445272371699807934981034131740576276550888724402164502717742159639279626070280039103133390093873901554713208212820727329541679945115304638939768355461854067269
flag = 184875671412285149264565117271760723697185488643352008410615336009808476360953819832460632984887898531667127073711549083590500357161253168466062132732875252710443918856989155267351170069663758873282881867246664316647896631408909248479544882718833699271718040509418329334009801096870502008952336964458074230046149475145422370357249373235269970822958589539189409397311787815018385844975295335530662790394093612274170614140755518585404676939435881237556587536091985090517181131172706871491153808117356029920329003689714553700655939451828700839567483635237494784634179083367407689863096727778779725575057295567547952990890532072957831216985471943712341601084313511590780458102861912127058109191854685432579557536949962785144870582276732396251746503382489448831215896410101759195421602028532749715952198041406443842896816033546053909138440647435750709767807728127971581900170864423782111423890673358108696421083950832454434397722757054276928545185535141475992946886795182866608440045465776194041193235259633579323064736319664273575446670175641922752743525672356663918224414968152108657793458664033823875170377583537780767201529709554767182229270793491158823371373123947927166029332407046589263293876983191679976546458223073800366515217331109100996687775938483779408691814646322082336896226881662618637791552745671010038675174380576018338250152859176519810177184595498733125151909768489058956032611627226842534202547824556348280397683903424130314480674115848237808913508499869605589969685453552316324246653675913043383658944435651105804225103341319683748832087153542532087309169495121054402917291793730375246063787801382655137497655233967008947147793314847492440805817517791241591491385753592413646916162265088796320015870378359302512968160491841931355782009166716793407890020558005419294240659759664018171828491383095780881767665030616032767679210298213449200562087288098208645590794475707030255021897089638721311808584362532694292951688360478533018144960781539931638835916736443056077397921108836999719729

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

def isqrt(n):
    x = n
    y = (x + 1) // 2
    while y < x:
        x = y
        y = (x + n // x) // 2
    return x

root = isqrt(pub)

prime = next_prime(root)

other_prime = pub // prime

n = prime * other_prime
e = 65537
d=modinv(e,(prime-1)*(other_prime-1))
key=RSA.construct((n,e,d,prime,other_prime))

flag_text = key.decrypt(flag)

print('\n')
print(flag_text)
print(hex(flag_text))